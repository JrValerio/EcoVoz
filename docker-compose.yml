services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000' 
    depends_on:
      - backend
    networks:
      - ecovoz_network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ["npm", "run", "start"]
    ports:
      - '4000:4000'
    env_file:
      - .env
    environment:
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/ecovoz?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REACT_APP_API_URL=http://backend:4000
    depends_on:
      - mongo
    networks:
      - ecovoz_network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:4000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo:
    image: mongo
    container_name: ecovoz_mongo
    ports:
      - '27017:27017'
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecovoz_network
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand({ ping: 1 })' | mongo localhost:27017/admin --quiet || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongo_data:

networks:
  ecovoz_network:
    driver: bridge
